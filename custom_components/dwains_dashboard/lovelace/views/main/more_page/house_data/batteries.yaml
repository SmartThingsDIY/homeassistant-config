# dwains_dashboard

- title: {{ _dd_trans.more_page.house_data.all_batteries }}
  path: more_page_house_data_batteries
  type: custom:dwains-dashboard
  visible: false
  cards:    
    - type: vertical-stack
      cards:
        #Header
        - type: custom:dwains-header-card
          title:  {{ _dd_trans.more_page.house_data.all_batteries }}
          subtitle: {{ _dd_trans.more_page.house_data.title }}
          navigation_path: more_page_house_data
          icon: {{ _dd_icons.menu_back|default('mdi:chevron-left') }}
        #Start for all batteries page
        - type: custom:dwains-auto-entities-card
          filter:
            exclude:
              - entity_id: '*battery_state*'
            include:

              - attributes:
                  device_class: battery
                domain: sensor
                options:
                  type: custom:button-card
                  template: house_data_item
                  entity: this.entity_id
                  icon: >
                    [[[ 
                      let conf = {{ _dd_config.global["battery_empty_strings"] | tojson }};
                      let nok_states = (Array.isArray(conf) && conf.length) ? conf : 'unknown';
                      if(states['this.entity_id']){
                        if (nok_states.includes(states['this.entity_id'].state)){
                          return 'mdi:battery-alert';
                        } else if (states['this.entity_id'].state != 'unknown' && states['this.entity_id'].state <= 10) {
                          return 'mdi:battery-outline';
                        } else if (states['this.entity_id'].state != 'unknown' && states['this.entity_id'].state < 95) {
                          var battery = Math.round(states['this.entity_id'].state / 10) * 10
                          return 'mdi:battery-' + battery;
                        } else {
                          return 'mdi:battery';
                        }
                      }
                    ]]]
                  styles:
                    icon:
                      - color: >
                          [[[
                            let conf = {{ _dd_config.global["battery_empty_strings"] | tojson }};
                            let nok_states = (Array.isArray(conf) && conf.length) ? conf : 'unknown';
                            if (nok_states.includes(states['this.entity_id'].state)) return '#ff0000';
                            else if (entity.state <= 0) return '#ff0000';
                            else if (entity.state <= 10) return '#ff5b00';
                            else if (entity.state <= 20) return '#ff8a00';
                            else if (entity.state <= 30) return '#ffb300';
                            else if (entity.state <= 40) return '#ffda00';
                            else if (entity.state <= 50) return '#ffff00';
                            else if (entity.state <= 60) return '#e3ff00';
                            else if (entity.state <= 70) return '#c3ff00';
                            else if (entity.state <= 80) return '#9eff00';
                            else if (entity.state <= 90) return '#6fff00';
                            else if (entity.state <= 100) return '#00ff00';
                            else return '#00ff00';
                          ]]]
              - type: custom:button-card
                color_type: blank-card
                aspect_ratio: 1/1
          show_empty: false
          sort:
            method: state
            numeric: true
          card:
            type: custom:dwains-flexbox-card
            padding: true
            items_classes: 'col-xs-12 col-sm-6 col-md-3 col-lg-3'
        - type: custom:dwains-auto-entities-card
          filter:
            exclude:
              - entity_id: '*battery_state*'
            include:
              - attributes:
                  device_class: battery
                domain: binary_sensor
                options:
                  type: custom:button-card
                  template: house_data_item
                  entity: this.entity_id
                  icon: >
                    [[[ 
                      if(states['this.entity_id']){
                        if (states['this.entity_id'].state == 'unknown'){
                          return 'mdi:battery-alert';
                        } else if (states['this.entity_id'].state == 'on') {
                          return 'mdi:battery-outline';
                        } else {
                          return 'mdi:battery';
                        }
                      }
                    ]]]
                  styles:
                    icon:
                      - color: >
                          [[[
                            let conf = {{ _dd_config.global["battery_empty_strings"] | tojson }};
                            let nok_states = (Array.isArray(conf) && conf.length) ? conf : 'unknown';
                            if (nok_states.includes(states['this.entity_id'].state)) return '#ff0000';
                            else if (entity.state <= 0) return '#ff0000';
                            else if (entity.state <= 10) return '#ff5b00';
                            else if (entity.state <= 20) return '#ff8a00';
                            else if (entity.state <= 30) return '#ffb300';
                            else if (entity.state <= 40) return '#ffda00';
                            else if (entity.state <= 50) return '#ffff00';
                            else if (entity.state <= 60) return '#e3ff00';
                            else if (entity.state <= 70) return '#c3ff00';
                            else if (entity.state <= 80) return '#9eff00';
                            else if (entity.state <= 90) return '#6fff00';
                            else if (entity.state <= 100) return '#00ff00';
                            else return '#00ff00';
                          ]]]
              - type: custom:button-card
                color_type: blank-card
                aspect_ratio: 1/1
          show_empty: false
          sort:
            method: state
            reverse: true        
          card:
            type: custom:dwains-flexbox-card
            padding: true
            items_classes: 'col-xs-12 col-sm-6 col-md-3 col-lg-3'
